name: Run Test CI & Merge

on:
  pull_request:

jobs:
  code-test:
    name: code-test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.13.*' # The Go version to download (if necessary) and use.
      - name: Generate config file
        run: make generate-api-key SACLOUD_API_TOKEN=${{ secrets.ACCESS_TOKEN }} SACLOUD_API_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} SACLOUD_API_ZONE=tk1a
      - name: Run Test
        run: make verify TEST_ZONE_NAME=${{ secrets.TEST_ZONE_NAME }}

  post-test-merge:
    name: post-test-merge
    needs: code-test
    if: ${{ needs.code-test.result }} == 'success' && ((github.event.pull_request.base.ref == 'master' && (github.event.pull_request.head.ref == 'develop' || startsWith(github.event.pull_request.head.ref == 'hotfix/'))) || github.event.pull_request.base.ref == 'develop')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Job result[code-test]
        run: echo ${{ needs.code-test.result }}
      - name: Reference[github.event.pull_request.base.ref]
        run: echo ${{ github.event.pull_request.base.ref }}
      - name: Reference[github.event.pull_request.head.ref]
        run: echo ${{ github.event.pull_request.head.ref }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get version
        run: echo "::set-env name=TAG_NAME::$(cat VERSION)"
      - name: update helm chart
        run: make rendered-manifest.yaml IMAGE_TAG=${TAG_NAME}
      - name: update helm repo
        run: make helm-repository
      - uses: EndBug/add-and-commit@v4
        with:
          add: "-A"
          message: "Update helm repo"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: add label "automerge"
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['automerge']
            })
      - name: automerge
        uses: "pascalgn/automerge-action@v0.9.0"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_DELETE_BRANCH: "true"
          MERGE_FORKS: "false"

  post-test-tag-master:
    name: post-test-tag-master
    needs: post-test-merge
    if: ${{ needs.post-test-merge.result }} == 'success' && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Job result[post-test-merge]
        run: echo ${{ needs.post-test-merge.result }}
      - name: Reference[github.event.pull_request.base.ref]
        run: echo ${{ github.event.pull_request.base.ref }}
      - name: Reference[github.event.pull_request.head.ref]
        run: echo ${{ github.event.pull_request.head.ref }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: update merged ref
        run: git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin master && git checkout master && git pull --ff origin
      - name: Get version
        run: echo "::set-env name=TAG_NAME::$(cat VERSION)"
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Run Buildx
        run: |
          make push PLATFORM=linux/amd64,linux/arm64 IMAGE_TAG=${TAG_NAME}
      - name: get merged master sha
        run: echo "::set-env name=TARGET_SHA::$(git rev-parse master)"
      - name: add versin tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.TAG_NAME}`,
              sha: `${process.env.TARGET_SHA}`
            })

  post-test-tag-develop:
    name: post-test-tag-develop
    needs: post-test-merge
    if: ${{ needs.post-test-merge.result }} == 'success' && github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Job result[post-test-merge]
        run: echo ${{ needs.post-test-merge.result }}
      - name: Reference[github.event.pull_request.base.ref]
        run: echo ${{ github.event.pull_request.base.ref }}
      - name: Reference[github.event.pull_request.head.ref]
        run: echo ${{ github.event.pull_request.head.ref }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: update merged ref
        run: git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin develop && git checkout develop
      - name: Get version
        run: echo "::set-env name=TAG_NAME::$(echo $(cat VERSION)-dev-$(git rev-parse develop))"
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Run Buildx
        run: |
          make push PLATFORM=linux/amd64,linux/arm64 IMAGE_TAG=${TAG_NAME}
      - name: get merged master sha
        run: echo "::set-env name=TARGET_SHA::$(git rev-parse develop)"
      - name: add versin tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.TAG_NAME}`,
              sha: `${process.env.TARGET_SHA}`
            })
